@inject IDataGateway dataGateway
@inject IChartJsInterop chartJsInterop

<div class="container">
    @* Example of chart drawing *@
    <div class="row">
        <h4>Test chart:</h4>
        <div style="width:75%;">
            <canvas id="chartCanvas"></canvas>
            <label for="latest-date">Latest date:</label>

            <input type="date" id="latest-date" name="date-end" 
                   value=@today
                   @onchange="(e) => UpdateChart(e)"
                   min="2018-01-01" 
                   >
        </div>
    </div>

    @* Example of test data (as json) *@
    <div class="row">
        <h4>Test data:</h4>
        <span>@TestDataJson</span>
    </div>
</div>
@code
{
    string TestDataJson = string.Empty;
    Report[] reports = Array.Empty<Report>();

    //Place holder for datepicker
    string today = "";

    protected override async Task OnInitializedAsync()
    {
        reports = await dataGateway.LoadReports();
        TestDataJson = System.Text.RegularExpressions.Regex.Unescape(System.Text.Json.JsonSerializer.Serialize(reports));

        //Get Latest Date from the reports
        DateTime latestRecordDate = reports.Max(r => r.WorkDate);
        today = latestRecordDate.ToString("yyyy-MM-dd");
        DateTime previousWeek = latestRecordDate.AddDays(-6);
        //Filter reports for the range of last recorded data and the past 7 days
        IEnumerable<Report> filteredReports = FilterReports(reports, previousWeek, latestRecordDate);
        //Draw the chart
        await chartJsInterop.Draw(filteredReports, previousWeek, latestRecordDate);
        await InvokeAsync(StateHasChanged);
    }

    //Update the chart when a new date is selected
    async Task UpdateChart(ChangeEventArgs e)
    {
        if(e != null)
        {
            string dateString = e.Value.ToString();
            DateTime selectedDate = DateTime.Parse(dateString);
            DateTime previousWeek = selectedDate.AddDays(-6);
            IEnumerable<Report> reportsToShow = FilterReports(reports, previousWeek, selectedDate);
            await chartJsInterop.UpdateChart(reportsToShow, previousWeek, selectedDate);
            await InvokeAsync(StateHasChanged);
        }
    }
    //Filters reports and returns IEnumerable within a specified startDate and endDate
    private IEnumerable<Report> FilterReports(Report[] reports, DateTime startDate, DateTime endDate)
    {
        return reports.Where(r => r.WorkDate >= startDate && r.WorkDate <= endDate);
    }
}
